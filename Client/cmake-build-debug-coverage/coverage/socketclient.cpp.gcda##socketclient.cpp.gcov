        -:    0:Source:/home/luispedro/Documents/TEC/Semestre III/Algoritmos y Estructuras de Datos 2/Tarea 1/Client/src/socketclient.cpp
        -:    0:Graph:/home/luispedro/Documents/TEC/Semestre III/Algoritmos y Estructuras de Datos 2/Tarea 1/Client/cmake-build-debug-coverage/src/CMakeFiles/Client_lib.dir/socketclient.cpp.gcno
        -:    0:Data:/home/luispedro/Documents/TEC/Semestre III/Algoritmos y Estructuras de Datos 2/Tarea 1/Client/cmake-build-debug-coverage/src/CMakeFiles/Client_lib.dir/socketclient.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by luispedro on 23/9/20.
        -:    3://
        -:    4:
        -:    5:#include <string>
        -:    6:#include "socketclient.h"
        -:    7:
        -:    8:/*!
        -:    9: * Constructor method
        -:   10: */
        6:   11:SocketClient::SocketClient() {
        6:   12:    sock = 0;
        6:   13:    buffer[1024] = {0};
        6:   14:    ip_address= "127.0.0.1";
        6:   15:    state = Create(ip_address);
        6:   15-block  0
        6:   16:}
        -:   17:
        -:   18:/*!
        -:   19: * Attempts to create socket. Returns 0 if succeeded or -1 if failed
        -:   20: * @return state : int
        -:   21: */
       11:   22:int SocketClient::Create(const char * ip_address) {
       11:   23:    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0)
       11:   23-block  0
        -:   24:    {
    #####:   25:        return -1;// Socket creation error
    %%%%%:   25-block  0
        -:   26:    }
       11:   27:    serv_addr.sin_family = AF_INET;
       11:   28:    serv_addr.sin_port = htons(PORT);
        -:   29:
        -:   30:    // Convert IPv4 and IPv6 addresses from text to binary form
       11:   31:    if(inet_pton(AF_INET, ip_address, &serv_addr.sin_addr)<=0)
       11:   31-block  0
        -:   32:    {
        2:   33:        return -1; //Invalid address/ Address not supported
        2:   33-block  0
        -:   34:    }
        -:   35:
        9:   36:    if (connect(sock, (struct sockaddr *) &serv_addr, sizeof(serv_addr)) < 0)
        9:   36-block  0
        -:   37:    {
        4:   38:        return -2;//Connection failed
        4:   38-block  0
        -:   39:    }
        5:   40:    return 0;
        5:   40-block  0
        -:   41:}
        -:   42:
        -:   43:
        -:   44:/*!
        -:   45: * Sends message to server
        -:   46: * @param message : char**
        -:   47: */
        1:   48:void SocketClient::SendBuffer(char** message) {
        1:   49:    send(sock , *message , strlen(*message) , 0 );
        1:   49-block  0
        1:   50:    printf("Message sent from the server\n");
        1:   51:    valread = read( sock , buffer, 1024);
        1:   52:    printf(buffer);
        1:   53:}
        -:   54:
        -:   55:/*!
        -:   56: * Destructor method
        -:   57: */
    #####:   58:SocketClient::~SocketClient() {
    #####:   59:    delete this;
    %%%%%:   59-block  0
    %%%%%:   59-block  1
    #####:   60:}
        -:   61:
        -:   62:/*!
        -:   63: * buffer getter
        -:   64: * @return s_buffer : string
        -:   65: */
    #####:   66:string SocketClient::GetBuffer() {
    #####:   67:    string s_buffer = this->CharToString(buffer, 2048);
    %%%%%:   67-block  0
    #####:   68:    return s_buffer;
        -:   69:}
        -:   70:
        1:   71:const char * SocketClient ::GetBufferChar() {
        1:   72:    return this->buffer;
        1:   72-block  0
        -:   73:}
        -:   74:
        -:   75:/*!
        -:   76: * Parse to string from char type
        -:   77: * @param c : char*
        -:   78: * @param size : int
        -:   79: * @return s : string
        -:   80: */
        1:   81:string SocketClient::CharToString(char *c, int size) {
        1:   82:    string s;
        1:   82-block  0
       20:   83:    for (int i = 0; i < size; i++) {
       20:   83-block  0
       19:   83-block  1
       19:   84:        s += c[i];
       19:   84-block  0
        -:   85:    }
        1:   86:    return s;
        1:   86-block  0
        1:   86-block  1
        -:   87:}
        -:   88:
        -:   89:/*!
        -:   90: * state getter
        -:   91: * @return state : int
        -:   92: */
    #####:   93:int SocketClient::GetState() const {
    #####:   94:    return state;
    %%%%%:   94-block  0
        -:   95:}
